import "./chunk-GFT2G5UO.js";

// node_modules/@tosspayments/payment-sdk/dist/tosspayments.esm.js
var cachedPromise;
function loadScript(src, namespace) {
  var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var existingElement = document.querySelector('[src="'.concat(src, '"]'));
  if (existingElement != null && cachedPromise !== void 0) {
    return cachedPromise;
  }
  if (existingElement != null && getNamespace(namespace) !== void 0) {
    return Promise.resolve(getNamespace(namespace));
  }
  var script = document.createElement("script");
  script.src = src;
  if (options.priority !== void 0) {
    script.fetchPriority = options.priority;
  }
  cachedPromise = new Promise(function(resolve, reject) {
    document.head.appendChild(script);
    window.addEventListener("TossPayments:initialize:".concat(namespace), function() {
      if (getNamespace(namespace) !== void 0) {
        resolve(getNamespace(namespace));
      } else {
        reject(new Error("[TossPayments SDK] Failed to load script: [".concat(src, "]")));
      }
    });
  });
  return cachedPromise;
}
function getNamespace(name) {
  return window[name];
}
var SCRIPT_URL = "https://js.tosspayments.com/v1";
function loadTossPayments(clientKey) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$src = _ref.src, src = _ref$src === void 0 ? SCRIPT_URL : _ref$src;
  if (typeof window === "undefined") {
    return Promise.resolve({
      requestPayment: function requestPayment() {
        throw new Error("[TossPayments SDK] It looks like runtime is not from browser. This method is only executable on browser.");
      },
      requestBillingAuth: function requestBillingAuth() {
        throw new Error("[TossPayments SDK] It looks like runtime is not from browser. This method is only executable on browser.");
      },
      cancelPayment: function cancelPayment() {
        throw new Error("[TossPayments SDK] It looks like runtime is not from browser. This method is only executable on browser.");
      }
    });
  }
  return loadScript(src, "TossPayments").then(function(TossPayments) {
    return TossPayments(clientKey);
  });
}
function clearTossPayments() {
  var _script$parentElement;
  var script = document.querySelector('script[src="'.concat(SCRIPT_URL, '"]'));
  script === null || script === void 0 ? void 0 : (_script$parentElement = script.parentElement) === null || _script$parentElement === void 0 ? void 0 : _script$parentElement.removeChild(script);
  window.TossPayments = void 0;
}
export {
  clearTossPayments,
  loadTossPayments
};
//# sourceMappingURL=@tosspayments_payment-sdk.js.map
